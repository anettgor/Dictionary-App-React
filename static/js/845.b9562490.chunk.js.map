{"version":3,"file":"static/js/845.b9562490.chunk.js","mappings":"0MACA,EAA4B,+BAA5B,EAAqE,6BAArE,EAAmH,oCAAnH,EAAgK,4B,kBC6BhK,MAxBA,WAAwB,IAAD,EACrB,GAAsCA,EAAAA,EAAAA,IAAYC,EAAAA,IAAS,GAAnDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SACRC,GAAW,UADjB,EAAwBC,UACGC,MAAK,SAAAH,GAAQ,OAAIA,EAASI,KAAb,WAAvB,eAA4CA,QAAS,GAChEA,EAAQ,IAAIC,MAAMJ,GAMxB,OACE,iBAAKK,UAAWC,EAAhB,WACE,4BACE,eAAID,UAAWC,EAAf,SAA6BR,KAC7B,cAAGO,UAAWC,EAAd,SAAmCP,OAEpCC,IACC,mBAAQK,UAAWC,EAAYC,QAXxB,WACXJ,EAAMK,MACP,EASK,UACE,SAAC,MAAD,CAAiBC,KAAM,GAAIC,KAAM,kBAK1C,E,SC3BD,EAAuB,qBAAvB,EAAmD,qBCmBnD,MAfA,WACE,IACMC,GADOf,EAAAA,EAAAA,IAAYC,EAAAA,IACF,GAAGe,WAAW,GAErC,OACE,eAAGP,UAAWC,EAAd,mBACS,KACP,eAAGO,KAAMF,EAAWN,UAAWC,EAAUQ,OAAO,SAASC,IAAI,aAA7D,UACGJ,GACD,SAAC,MAAD,SAIP,E,QCjBD,EAA0B,6BAA1B,EAAmE,+BAAnE,EAA6G,8BAA7G,EAA2J,mCC4B3J,MAxBA,YAAmC,IAAZK,EAAW,EAAXA,QACfC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,iBAAKb,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,uBACA,eAAID,UAAWC,EAAf,SACGU,EAAQG,KAAI,SAACrB,EAAMsB,GAAP,OACX,eACEf,UAAWC,EAEXC,QAAS,kBAXC,SAAAT,GAClBmB,GAASI,EAAAA,EAAAA,GAAUvB,GACpB,CASwBwB,CAAYxB,EAAlB,EAHX,SAKa,IAAVsB,EAActB,EAAO,KAAOA,GAHxBsB,EAHI,QAYpB,EC1BD,EAA0B,6BAA1B,EAA8D,0BAA9D,EAA0G,qCCyB1G,MArBA,YAAiC,IAAVA,EAAS,EAATA,MACftB,GAAOF,EAAAA,EAAAA,IAAYC,EAAAA,IAAS,GAElC,OACE,iCACE,eAAIQ,UAAWC,EAAf,sBACA,wBACGR,EAAKyB,SAASH,GAAOI,YAAYL,KAChC,WAAoCC,GAApC,IAAGK,EAAH,EAAGA,WAAYC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,QAAzB,OACE,gBAAgBtB,UAAWC,EAA3B,WACE,uBAAImB,KACJ,cAAGpB,UAAWC,EAAd,SAAoCqB,IACnCD,EAASE,OAAS,IAAK,SAAC,EAAD,CAAaZ,QAASU,MAHvCN,EADX,QAWT,ECvBD,EAA4B,gCAA5B,EAAmE,2BAAnE,EAAuG,6BC0BvG,MApBA,WACE,IACMG,GADU3B,EAAAA,EAAAA,IAAYC,EAAAA,IACH,GAAG0B,SAE5B,OAAOA,EAASJ,KAAI,WAAmBC,GAAW,IAA3BS,EAA0B,EAA1BA,aACrB,OACE,iCACE,iBAAKxB,UAAWC,EAAhB,WACE,gBAAID,UAAWC,EAAf,cAA2BuB,MAC3B,gBAAKxB,UAAWC,MAFkBc,IAIpC,SAAC,EAAD,CAAaA,MAAOA,IACnBG,EAASH,GAAOM,SAASE,OAAS,IACjC,SAAC,EAAD,CAAaZ,QAASO,EAASH,GAAOM,aAI7C,GACF,ECTD,MAVA,WACE,OACE,iCACE,SAAC,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["webpack://dictionary-app-react/./src/components/ResultAudio/ResultAudio.module.css?5e6e","components/ResultAudio/ResultAudio.jsx","webpack://dictionary-app-react/./src/components/Source/Source.module.css?91c1","components/Source/Source.jsx","webpack://dictionary-app-react/./src/components/SynonymList/SynonymList.module.css?49f5","components/SynonymList/SynonymList.jsx","webpack://dictionary-app-react/./src/components/MeaningList/MeaningList.module.css?0af1","components/MeaningList/MeaningList.jsx","webpack://dictionary-app-react/./src/components/PartOfSpeech/PartOfSpeech.module.css?751a","components/PartOfSpeech/PartOfSpeech.jsx","components/Result/Result.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ResultAudio_container__3q4py\",\"heading\":\"ResultAudio_heading__fBO6s\",\"pronounciation\":\"ResultAudio_pronounciation__R85Um\",\"button\":\"ResultAudio_button__tuyJT\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { IoIosPlayCircle } from 'react-icons/io';\nimport css from './ResultAudio.module.css';\nimport { getWord } from 'redux/selectors';\n\nfunction ResultAudio() {\n  const { word, phonetic, phonetics } = useSelector(getWord)[0];\n  const audioSrc = phonetics.find(phonetic => phonetic.audio)?.audio || '';\n  const audio = new Audio(audioSrc);\n\n  const play = () => {\n    audio.play();\n  };\n\n  return (\n    <div className={css.container}>\n      <div>\n        <h1 className={css.heading}>{word}</h1>\n        <p className={css.pronounciation}>{phonetic}</p>\n      </div>\n      {audioSrc && (\n        <button className={css.button} onClick={play}>\n          <IoIosPlayCircle size={60} fill={'#a445eddd'} />\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default ResultAudio;\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Source_text__G5sSV\",\"link\":\"Source_link__a9Q7U\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { MdOpenInNew } from 'react-icons/md';\nimport css from './Source.module.css';\nimport { getWord } from './../../redux/selectors';\nfunction Source() {\n  const word = useSelector(getWord);\n  const sourceUrl = word[0].sourceUrls[0];\n\n  return (\n    <p className={css.text}>\n      Source{' '}\n      <a href={sourceUrl} className={css.link} target=\"_blank\" rel=\"noreferrer\">\n        {sourceUrl}\n        <MdOpenInNew />\n      </a>\n    </p>\n  );\n}\n\nexport default Source;\n","// extracted by mini-css-extract-plugin\nexport default {\"heading\":\"SynonymList_heading__-7xFN\",\"container\":\"SynonymList_container__x8+Ch\",\"listItem\":\"SynonymList_listItem__jCgLR\",\"listContainer\":\"SynonymList_listContainer__Jmhjo\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchWord } from './../../redux/operations';\nimport css from './SynonymList.module.css';\n\nfunction SynonymList({ synonym }) {\n  const dispatch = useDispatch();\n\n  const handleClick = word => {\n    dispatch(fetchWord(word));\n  };\n  return (\n    <div className={css.container}>\n      <h3 className={css.heading}>Synonyms</h3>\n      <ul className={css.listContainer}>\n        {synonym.map((word, index) => (\n          <li\n            className={css.listItem}\n            key={index}\n            onClick={() => handleClick(word)}\n          >\n            {index === 0 ? word : ', ' + word}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default SynonymList;\n","// extracted by mini-css-extract-plugin\nexport default {\"heading\":\"MeaningList_heading__00XKx\",\"item\":\"MeaningList_item__3JegO\",\"exampleSentence\":\"MeaningList_exampleSentence__kyTAd\"};","import React from 'react';\nimport { getWord } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport SynonymList from 'components/SynonymList/SynonymList';\nimport css from './MeaningList.module.css';\nfunction MeaningList({ index }) {\n  const word = useSelector(getWord)[0];\n\n  return (\n    <>\n      <h3 className={css.heading}>Meaning</h3>\n      <ul>\n        {word.meanings[index].definitions.map(\n          ({ definition, synonyms, example }, index) => (\n            <li key={index} className={css.item}>\n              <p>{definition}</p>\n              <p className={css.exampleSentence}>{example}</p>\n              {synonyms.length > 0 && <SynonymList synonym={synonyms} />}\n            </li>\n          )\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default MeaningList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PartOfSpeech_container__ZixOW\",\"part\":\"PartOfSpeech_part__CVrqu\",\"border\":\"PartOfSpeech_border__hPma4\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getWord } from 'redux/selectors';\nimport MeaningList from 'components/MeaningList/MeaningList';\nimport SynonymList from 'components/SynonymList/SynonymList';\nimport css from './PartOfSpeech.module.css';\n\nfunction PartOfSpeech() {\n  const wordArr = useSelector(getWord);\n  const meanings = wordArr[0].meanings;\n\n  return meanings.map(({ partOfSpeech }, index) => {\n    return (\n      <>\n        <div className={css.container} key={index}>\n          <h3 className={css.part}> {partOfSpeech}</h3>\n          <div className={css.border}></div>\n        </div>\n        <MeaningList index={index} />\n        {meanings[index].synonyms.length > 0 && (\n          <SynonymList synonym={meanings[index].synonyms} />\n        )}\n      </>\n    );\n  });\n}\n\nexport default PartOfSpeech;\n","import ResultAudio from 'components/ResultAudio/ResultAudio';\nimport Source from 'components/Source/Source';\nimport PartOfSpeech from 'components/PartOfSpeech/PartOfSpeech';\n\nimport React from 'react';\n\nfunction Result() {\n  return (\n    <>\n      <ResultAudio />\n      <PartOfSpeech />\n      <Source />\n    </>\n  );\n}\n\nexport default Result;\n"],"names":["useSelector","getWord","word","phonetic","audioSrc","phonetics","find","audio","Audio","className","css","onClick","play","size","fill","sourceUrl","sourceUrls","href","target","rel","synonym","dispatch","useDispatch","map","index","fetchWord","handleClick","meanings","definitions","definition","synonyms","example","length","partOfSpeech"],"sourceRoot":""}